import cv2 as cv
import numpy as np
import rospy
import tf2_ros
import tf2_geometry_msgs
from geometry_msgs.msg import PointStamped
from clover import srv
from std_srvs.srv import Trigger
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
from clover import long_callback


get_telemetry = rospy.ServiceProxy('get_telemetry', srv.GetTelemetry)
navigate = rospy.ServiceProxy('navigate', srv.Navigate)
land = rospy.ServiceProxy('land', Trigger)

#pub = rospy.Publisher('buildings', String, queue_size=1)
tf_buffer = tf2_ros.Buffer()
listener = tf2_ros.TransformListener(tf_buffer)
bridge = CvBridge()

colors = {
    "red"   : ((0, 0, 220),(50, 50, 255)),
    "green" : ((0, 220, 0),(50, 255, 50)),
    "blue"  : ((255, 0, 0),(255, 60, 60)),
    "yellow": ((0, 220, 220),(0, 255, 255)) 
}
buildings = []


def scan(img):
    for col, val in colors.items():
        bin = cv.inRange(img, val[0], val[1])
        count = cv.countNonZero(bin)
        if count > 30:
            return col, bin
        
    return False


def get_centers(bin_img):
    contours, _ = cv.findContours(bin_img, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
    cords = []
    for cnt in contours:
        M = cv.moments(cnt)
        if M["m00"] != 0:
            x = int(M["m10"] / M["m00"])
            y = int(M["m01"] / M["m00"])
            cords.append((x, y))

    return cords
        


@long_callback
def image_callback(data):
    img = bridge.imgmsg_to_cv2(data, 'bgr8')
    color, bin = scan(img)
    if color:
        cords = get_centers()

   
    

image_sub = rospy.Subscriber('main_camera/image_raw', Image, image_callback)
